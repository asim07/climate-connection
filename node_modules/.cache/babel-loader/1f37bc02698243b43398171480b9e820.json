{"ast":null,"code":"import { EventEmitter } from \"events\";\nimport { IJsonRpcProvider, isJsonRpcResponse, formatJsonRpcRequest, isJsonRpcError } from \"@walletconnect/jsonrpc-utils\";\nexport class JsonRpcProvider extends IJsonRpcProvider {\n  constructor(connection) {\n    super(connection);\n    this.events = new EventEmitter();\n    this.hasRegisteredEventListeners = false;\n    this.connection = this.setConnection(connection);\n\n    if (this.connection.connected) {\n      this.registerEventListeners();\n    }\n  }\n\n  async connect() {\n    let connection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.connection;\n    await this.open(connection);\n  }\n\n  async disconnect() {\n    await this.close();\n  }\n\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n\n  async request(request, context) {\n    return this.requestStrict(formatJsonRpcRequest(request.method, request.params || []), context);\n  }\n\n  async requestStrict(request, context) {\n    return new Promise(async (resolve, reject) => {\n      if (!this.connection.connected) {\n        try {\n          await this.open();\n        } catch (e) {\n          reject(e);\n        }\n      }\n\n      this.events.on(`${request.id}`, response => {\n        if (isJsonRpcError(response)) {\n          reject(response.error.message);\n        } else {\n          resolve(response.result);\n        }\n      });\n\n      try {\n        await this.connection.send(request, context);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  setConnection() {\n    let connection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.connection;\n    return connection;\n  }\n\n  onPayload(payload) {\n    this.events.emit(\"payload\", payload);\n\n    if (isJsonRpcResponse(payload)) {\n      this.events.emit(`${payload.id}`, payload);\n    } else {\n      this.events.emit(\"message\", {\n        type: payload.method,\n        data: payload.params\n      });\n    }\n  }\n\n  async open() {\n    let connection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.connection;\n    if (this.connection === connection && this.connection.connected) return;\n    if (this.connection.connected) this.close();\n\n    if (typeof connection === \"string\") {\n      await this.connection.open(connection);\n      connection = this.connection;\n    }\n\n    this.connection = this.setConnection(connection);\n    await this.connection.open();\n    this.registerEventListeners();\n    this.events.emit(\"connect\");\n  }\n\n  async close() {\n    await this.connection.close();\n  }\n\n  registerEventListeners() {\n    if (this.hasRegisteredEventListeners) return;\n    this.connection.on(\"payload\", payload => this.onPayload(payload));\n    this.connection.on(\"close\", () => this.events.emit(\"disconnect\"));\n    this.connection.on(\"error\", error => this.events.emit(\"error\", error));\n    this.hasRegisteredEventListeners = true;\n  }\n\n}\nexport default JsonRpcProvider;","map":{"version":3,"sources":["../../src/provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { EventEmitter } from \"events\";\nimport { IJsonRpcProvider, isJsonRpcResponse, formatJsonRpcRequest, isJsonRpcError, } from \"@walletconnect/jsonrpc-utils\";\nexport class JsonRpcProvider extends IJsonRpcProvider {\n    constructor(connection) {\n        super(connection);\n        this.events = new EventEmitter();\n        this.hasRegisteredEventListeners = false;\n        this.connection = this.setConnection(connection);\n        if (this.connection.connected) {\n            this.registerEventListeners();\n        }\n    }\n    async connect(connection = this.connection) {\n        await this.open(connection);\n    }\n    async disconnect() {\n        await this.close();\n    }\n    on(event, listener) {\n        this.events.on(event, listener);\n    }\n    once(event, listener) {\n        this.events.once(event, listener);\n    }\n    off(event, listener) {\n        this.events.off(event, listener);\n    }\n    removeListener(event, listener) {\n        this.events.removeListener(event, listener);\n    }\n    async request(request, context) {\n        return this.requestStrict(formatJsonRpcRequest(request.method, request.params || []), context);\n    }\n    async requestStrict(request, context) {\n        return new Promise(async (resolve, reject) => {\n            if (!this.connection.connected) {\n                try {\n                    await this.open();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            }\n            this.events.on(`${request.id}`, response => {\n                if (isJsonRpcError(response)) {\n                    reject(response.error.message);\n                }\n                else {\n                    resolve(response.result);\n                }\n            });\n            try {\n                await this.connection.send(request, context);\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n    }\n    setConnection(connection = this.connection) {\n        return connection;\n    }\n    onPayload(payload) {\n        this.events.emit(\"payload\", payload);\n        if (isJsonRpcResponse(payload)) {\n            this.events.emit(`${payload.id}`, payload);\n        }\n        else {\n            this.events.emit(\"message\", {\n                type: payload.method,\n                data: payload.params,\n            });\n        }\n    }\n    async open(connection = this.connection) {\n        if (this.connection === connection && this.connection.connected)\n            return;\n        if (this.connection.connected)\n            this.close();\n        if (typeof connection === \"string\") {\n            await this.connection.open(connection);\n            connection = this.connection;\n        }\n        this.connection = this.setConnection(connection);\n        await this.connection.open();\n        this.registerEventListeners();\n        this.events.emit(\"connect\");\n    }\n    async close() {\n        await this.connection.close();\n    }\n    registerEventListeners() {\n        if (this.hasRegisteredEventListeners)\n            return;\n        this.connection.on(\"payload\", (payload) => this.onPayload(payload));\n        this.connection.on(\"close\", () => this.events.emit(\"disconnect\"));\n        this.connection.on(\"error\", (error) => this.events.emit(\"error\", error));\n        this.hasRegisteredEventListeners = true;\n    }\n}\nexport default JsonRpcProvider;\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}